plant ROS_Node_Robot_Platform:
	uncontrollable u_robot_x, u_robot_y, u_robot_rotation;
	controllable c_move_forward, c_rotate_up, c_rotate_right, c_rotate_left, c_rotate_down;

	location right:
	initial; marked;
	edge c_move_forward;

	edge c_rotate_right goto right;
	edge c_rotate_up goto up;
	edge c_rotate_left goto left;
	edge c_rotate_down goto down;

	location left:
	edge c_move_forward;

	edge c_rotate_right goto right;
	edge c_rotate_up goto up;
	edge c_rotate_left goto left;
	edge c_rotate_down goto down;

	location up:
	edge c_move_forward;

	edge c_rotate_right goto right;
	edge c_rotate_up goto up;
	edge c_rotate_left goto left;
	edge c_rotate_down goto down;

	location down:
	edge c_move_forward;

	edge c_rotate_right goto right;
	edge c_rotate_up goto up;
	edge c_rotate_left goto left;
	edge c_rotate_down goto down;
end

plant ROS_Distance_Sensor:
    input int[0..20] i_distance;
	disc int[0..20] distance = 20;

  	uncontrollable u_distance;

	location:
	initial; marked;
	edge u_distance do distance := i_distance;
end

plant ROS_Environment_Scanner:
	uncontrollable u_environment;

	location:
	initial; marked;
end


plant ROS_Web_Controller:
	controllable c_environment, c_robot_x, c_robot_y, c_robot_rotation;

	location:
	initial; marked;
end


plant ROS_Robot_Platform:
	input int[0..20] i_robot_x;
	input int[0..20] i_robot_y;
	disc int[0..20] robot_x = 0;
	disc int[0..20] robot_y = 0;

  	uncontrollable u_robot_x, u_robot_y;

	location:
	initial; marked;
	edge u_robot_x do robot_x := i_robot_x;
	edge u_robot_y do robot_y := i_robot_y;
end


plant ROS_Node_Robot_Platform_Service_Time_Since_Start:
    input int[0..100] i_result;
	disc int[0..100] result = 0;

	controllable c_trigger, c_reset;
	uncontrollable u_response, u_error;

	location idle:
	initial; marked;
	edge c_trigger goto awaiting_response;

	location awaiting_response:
	edge u_response do result := i_result goto received_response;
	edge u_error goto error;

	location error:
	edge c_reset goto idle;

	location received_response:
	edge c_reset goto idle;

end


plant ROS_Node_Obstacle_Destroyer_Action_Destroy:
	input bool i_result;
	input int[0..100] i_feedback;
	disc bool result;
	disc int[0..100] feedback;

	disc int[0..20] input_x = 0;
	disc int[0..20] input_y = 0;

	controllable c_reset, c_trigger;
	uncontrollable u_succeeded, u_aborted, u_feedback;

	location idle:
	initial; marked;
	edge c_trigger when ROS_Node_Robot_Platform.left do input_x := ROS_Robot_Platform.robot_x - 1, input_y := ROS_Robot_Platform.robot_y goto executing;
	edge c_trigger when ROS_Node_Robot_Platform.right do input_x := ROS_Robot_Platform.robot_x + 1, input_y := ROS_Robot_Platform.robot_y goto executing;
	edge c_trigger when ROS_Node_Robot_Platform.up do input_x := ROS_Robot_Platform.robot_x, input_y := ROS_Robot_Platform.robot_y + 1 goto executing;
	edge c_trigger when ROS_Node_Robot_Platform.down do input_x := ROS_Robot_Platform.robot_x, input_y := ROS_Robot_Platform.robot_y - 1 goto executing;

	location executing:
	edge u_feedback do feedback := i_feedback goto received_feedback;
	edge u_succeeded do result := i_result goto finished;
	edge u_aborted goto aborted;

	location received_feedback:
	edge u_feedback do feedback := i_feedback goto received_feedback;
	edge u_succeeded do result := i_result goto finished;
	edge u_aborted goto aborted;

	location aborted:
	edge c_reset goto idle;

	location finished:
	edge c_reset goto idle;
end

// Ensure that service calls are processed before
requirement ROS_Node_Robot_Platform.c_move_forward needs ROS_Node_Robot_Platform_Service_Time_Since_Start.received_response;
requirement ROS_Node_Robot_Platform.c_rotate_left needs ROS_Node_Robot_Platform_Service_Time_Since_Start.received_response;
requirement ROS_Node_Robot_Platform.c_rotate_right needs ROS_Node_Robot_Platform_Service_Time_Since_Start.received_response;
requirement ROS_Node_Robot_Platform.c_rotate_up needs ROS_Node_Robot_Platform_Service_Time_Since_Start.received_response;
requirement ROS_Node_Robot_Platform.c_rotate_down needs ROS_Node_Robot_Platform_Service_Time_Since_Start.received_response;

// Remove obstacle only if close
requirement invariant ROS_Node_Obstacle_Destroyer_Action_Destroy.c_trigger needs ROS_Distance_Sensor.distance = 0;

// Move forward if safe
requirement invariant ROS_Node_Robot_Platform.c_move_forward needs ROS_Distance_Sensor.distance > 0 and ROS_Node_Robot_Platform_Service_Time_Since_Start.result <= 120;

// Rotation
requirement invariant ROS_Node_Robot_Platform.c_rotate_left needs ROS_Node_Obstacle_Destroyer_Action_Destroy.idle and not ROS_Node_Robot_Platform.left and ROS_Distance_Sensor.distance <= 0 and ROS_Node_Robot_Platform_Service_Time_Since_Start.result <= 120;
requirement invariant ROS_Node_Robot_Platform.c_rotate_right needs ROS_Node_Obstacle_Destroyer_Action_Destroy.idle and not ROS_Node_Robot_Platform.right and ROS_Distance_Sensor.distance <= 0 and ROS_Node_Robot_Platform_Service_Time_Since_Start.result <= 120;
requirement invariant ROS_Node_Robot_Platform.c_rotate_up needs ROS_Node_Obstacle_Destroyer_Action_Destroy.idle and not ROS_Node_Robot_Platform.up and ROS_Distance_Sensor.distance <= 0 and ROS_Node_Robot_Platform_Service_Time_Since_Start.result <= 120;
requirement invariant ROS_Node_Robot_Platform.c_rotate_down needs ROS_Node_Obstacle_Destroyer_Action_Destroy.idle and not ROS_Node_Robot_Platform.down and ROS_Distance_Sensor.distance <= 0 and ROS_Node_Robot_Platform_Service_Time_Since_Start.result <= 120;

